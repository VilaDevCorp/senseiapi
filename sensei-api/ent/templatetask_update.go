// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sensei/ent/activity"
	"sensei/ent/predicate"
	"sensei/ent/template"
	"sensei/ent/templatetask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TemplateTaskUpdate is the builder for updating TemplateTask entities.
type TemplateTaskUpdate struct {
	config
	hooks    []Hook
	mutation *TemplateTaskMutation
}

// Where appends a list predicates to the TemplateTaskUpdate builder.
func (ttu *TemplateTaskUpdate) Where(ps ...predicate.TemplateTask) *TemplateTaskUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetWeekDay sets the "weekDay" field.
func (ttu *TemplateTaskUpdate) SetWeekDay(i int) *TemplateTaskUpdate {
	ttu.mutation.ResetWeekDay()
	ttu.mutation.SetWeekDay(i)
	return ttu
}

// AddWeekDay adds i to the "weekDay" field.
func (ttu *TemplateTaskUpdate) AddWeekDay(i int) *TemplateTaskUpdate {
	ttu.mutation.AddWeekDay(i)
	return ttu
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (ttu *TemplateTaskUpdate) SetActivityID(id uuid.UUID) *TemplateTaskUpdate {
	ttu.mutation.SetActivityID(id)
	return ttu
}

// SetActivity sets the "activity" edge to the Activity entity.
func (ttu *TemplateTaskUpdate) SetActivity(a *Activity) *TemplateTaskUpdate {
	return ttu.SetActivityID(a.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (ttu *TemplateTaskUpdate) SetTemplateID(id uuid.UUID) *TemplateTaskUpdate {
	ttu.mutation.SetTemplateID(id)
	return ttu
}

// SetTemplate sets the "template" edge to the Template entity.
func (ttu *TemplateTaskUpdate) SetTemplate(t *Template) *TemplateTaskUpdate {
	return ttu.SetTemplateID(t.ID)
}

// Mutation returns the TemplateTaskMutation object of the builder.
func (ttu *TemplateTaskUpdate) Mutation() *TemplateTaskMutation {
	return ttu.mutation
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (ttu *TemplateTaskUpdate) ClearActivity() *TemplateTaskUpdate {
	ttu.mutation.ClearActivity()
	return ttu
}

// ClearTemplate clears the "template" edge to the Template entity.
func (ttu *TemplateTaskUpdate) ClearTemplate() *TemplateTaskUpdate {
	ttu.mutation.ClearTemplate()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TemplateTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TemplateTaskMutation](ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TemplateTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TemplateTaskUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TemplateTaskUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TemplateTaskUpdate) check() error {
	if _, ok := ttu.mutation.ActivityID(); ttu.mutation.ActivityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TemplateTask.activity"`)
	}
	if _, ok := ttu.mutation.TemplateID(); ttu.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TemplateTask.template"`)
	}
	return nil
}

func (ttu *TemplateTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(templatetask.Table, templatetask.Columns, sqlgraph.NewFieldSpec(templatetask.FieldID, field.TypeUUID))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.WeekDay(); ok {
		_spec.SetField(templatetask.FieldWeekDay, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.AddedWeekDay(); ok {
		_spec.AddField(templatetask.FieldWeekDay, field.TypeInt, value)
	}
	if ttu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.ActivityTable,
			Columns: []string{templatetask.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.ActivityTable,
			Columns: []string{templatetask.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.TemplateTable,
			Columns: []string{templatetask.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.TemplateTable,
			Columns: []string{templatetask.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatetask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TemplateTaskUpdateOne is the builder for updating a single TemplateTask entity.
type TemplateTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemplateTaskMutation
}

// SetWeekDay sets the "weekDay" field.
func (ttuo *TemplateTaskUpdateOne) SetWeekDay(i int) *TemplateTaskUpdateOne {
	ttuo.mutation.ResetWeekDay()
	ttuo.mutation.SetWeekDay(i)
	return ttuo
}

// AddWeekDay adds i to the "weekDay" field.
func (ttuo *TemplateTaskUpdateOne) AddWeekDay(i int) *TemplateTaskUpdateOne {
	ttuo.mutation.AddWeekDay(i)
	return ttuo
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (ttuo *TemplateTaskUpdateOne) SetActivityID(id uuid.UUID) *TemplateTaskUpdateOne {
	ttuo.mutation.SetActivityID(id)
	return ttuo
}

// SetActivity sets the "activity" edge to the Activity entity.
func (ttuo *TemplateTaskUpdateOne) SetActivity(a *Activity) *TemplateTaskUpdateOne {
	return ttuo.SetActivityID(a.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (ttuo *TemplateTaskUpdateOne) SetTemplateID(id uuid.UUID) *TemplateTaskUpdateOne {
	ttuo.mutation.SetTemplateID(id)
	return ttuo
}

// SetTemplate sets the "template" edge to the Template entity.
func (ttuo *TemplateTaskUpdateOne) SetTemplate(t *Template) *TemplateTaskUpdateOne {
	return ttuo.SetTemplateID(t.ID)
}

// Mutation returns the TemplateTaskMutation object of the builder.
func (ttuo *TemplateTaskUpdateOne) Mutation() *TemplateTaskMutation {
	return ttuo.mutation
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (ttuo *TemplateTaskUpdateOne) ClearActivity() *TemplateTaskUpdateOne {
	ttuo.mutation.ClearActivity()
	return ttuo
}

// ClearTemplate clears the "template" edge to the Template entity.
func (ttuo *TemplateTaskUpdateOne) ClearTemplate() *TemplateTaskUpdateOne {
	ttuo.mutation.ClearTemplate()
	return ttuo
}

// Where appends a list predicates to the TemplateTaskUpdate builder.
func (ttuo *TemplateTaskUpdateOne) Where(ps ...predicate.TemplateTask) *TemplateTaskUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TemplateTaskUpdateOne) Select(field string, fields ...string) *TemplateTaskUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TemplateTask entity.
func (ttuo *TemplateTaskUpdateOne) Save(ctx context.Context) (*TemplateTask, error) {
	return withHooks[*TemplateTask, TemplateTaskMutation](ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TemplateTaskUpdateOne) SaveX(ctx context.Context) *TemplateTask {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TemplateTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TemplateTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TemplateTaskUpdateOne) check() error {
	if _, ok := ttuo.mutation.ActivityID(); ttuo.mutation.ActivityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TemplateTask.activity"`)
	}
	if _, ok := ttuo.mutation.TemplateID(); ttuo.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TemplateTask.template"`)
	}
	return nil
}

func (ttuo *TemplateTaskUpdateOne) sqlSave(ctx context.Context) (_node *TemplateTask, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(templatetask.Table, templatetask.Columns, sqlgraph.NewFieldSpec(templatetask.FieldID, field.TypeUUID))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TemplateTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, templatetask.FieldID)
		for _, f := range fields {
			if !templatetask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != templatetask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.WeekDay(); ok {
		_spec.SetField(templatetask.FieldWeekDay, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.AddedWeekDay(); ok {
		_spec.AddField(templatetask.FieldWeekDay, field.TypeInt, value)
	}
	if ttuo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.ActivityTable,
			Columns: []string{templatetask.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.ActivityTable,
			Columns: []string{templatetask.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.TemplateTable,
			Columns: []string{templatetask.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.TemplateTable,
			Columns: []string{templatetask.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TemplateTask{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatetask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
