// Code generated by ent, DO NOT EDIT.

package ent

import (
	"sensei/ent/activity"
	"sensei/ent/schema"
	"sensei/ent/task"
	"sensei/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	activityMixin := schema.Activity{}.Mixin()
	activityMixinFields0 := activityMixin[0].Fields()
	_ = activityMixinFields0
	activityFields := schema.Activity{}.Fields()
	_ = activityFields
	// activityDescCreationDate is the schema descriptor for creationDate field.
	activityDescCreationDate := activityMixinFields0[1].Descriptor()
	// activity.DefaultCreationDate holds the default value on creation for the creationDate field.
	activity.DefaultCreationDate = activityDescCreationDate.Default.(func() time.Time)
	// activityDescName is the schema descriptor for name field.
	activityDescName := activityFields[0].Descriptor()
	// activity.NameValidator is a validator for the "name" field. It is called by the builders before save.
	activity.NameValidator = activityDescName.Validators[0].(func(string) error)
	// activityDescSize is the schema descriptor for size field.
	activityDescSize := activityFields[2].Descriptor()
	// activity.DefaultSize holds the default value on creation for the size field.
	activity.DefaultSize = activityDescSize.Default.(int)
	// activityDescID is the schema descriptor for id field.
	activityDescID := activityMixinFields0[0].Descriptor()
	// activity.DefaultID holds the default value on creation for the id field.
	activity.DefaultID = activityDescID.Default.(func() uuid.UUID)
	taskMixin := schema.Task{}.Mixin()
	taskMixinFields0 := taskMixin[0].Fields()
	_ = taskMixinFields0
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescCreationDate is the schema descriptor for creationDate field.
	taskDescCreationDate := taskMixinFields0[1].Descriptor()
	// task.DefaultCreationDate holds the default value on creation for the creationDate field.
	task.DefaultCreationDate = taskDescCreationDate.Default.(func() time.Time)
	// taskDescCompleted is the schema descriptor for completed field.
	taskDescCompleted := taskFields[1].Descriptor()
	// task.DefaultCompleted holds the default value on creation for the completed field.
	task.DefaultCompleted = taskDescCompleted.Default.(bool)
	// taskDescID is the schema descriptor for id field.
	taskDescID := taskMixinFields0[0].Descriptor()
	// task.DefaultID holds the default value on creation for the id field.
	task.DefaultID = taskDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreationDate is the schema descriptor for creationDate field.
	userDescCreationDate := userMixinFields0[1].Descriptor()
	// user.DefaultCreationDate holds the default value on creation for the creationDate field.
	user.DefaultCreationDate = userDescCreationDate.Default.(func() time.Time)
	// userDescUsername is the schema descriptor for Username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "Username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescMail is the schema descriptor for Mail field.
	userDescMail := userFields[1].Descriptor()
	// user.MailValidator is a validator for the "Mail" field. It is called by the builders before save.
	user.MailValidator = userDescMail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for Password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescDans is the schema descriptor for Dans field.
	userDescDans := userFields[3].Descriptor()
	// user.DefaultDans holds the default value on creation for the Dans field.
	user.DefaultDans = userDescDans.Default.(int)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
