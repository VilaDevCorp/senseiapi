// Code generated by ent, DO NOT EDIT.

package template

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the template type in the database.
	Label = "template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreationDate holds the string denoting the creationdate field in the database.
	FieldCreationDate = "creation_date"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTemplateTasks holds the string denoting the templatetasks edge name in mutations.
	EdgeTemplateTasks = "templateTasks"
	// Table holds the table name of the template in the database.
	Table = "templates"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "templates"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_templates"
	// TemplateTasksTable is the table that holds the templateTasks relation/edge.
	TemplateTasksTable = "template_tasks"
	// TemplateTasksInverseTable is the table name for the TemplateTask entity.
	// It exists in this package in order to avoid circular dependency with the "templatetask" package.
	TemplateTasksInverseTable = "template_tasks"
	// TemplateTasksColumn is the table column denoting the templateTasks relation/edge.
	TemplateTasksColumn = "template_template_tasks"
)

// Columns holds all SQL columns for template fields.
var Columns = []string{
	FieldID,
	FieldCreationDate,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "templates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_templates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreationDate holds the default value on creation for the "creationDate" field.
	DefaultCreationDate func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Template queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreationDate orders the results by the creationDate field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTemplateTasksCount orders the results by templateTasks count.
func ByTemplateTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemplateTasksStep(), opts...)
	}
}

// ByTemplateTasks orders the results by templateTasks terms.
func ByTemplateTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplateTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTemplateTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplateTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemplateTasksTable, TemplateTasksColumn),
	)
}
