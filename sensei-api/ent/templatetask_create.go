// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sensei/ent/activity"
	"sensei/ent/template"
	"sensei/ent/templatetask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TemplateTaskCreate is the builder for creating a TemplateTask entity.
type TemplateTaskCreate struct {
	config
	mutation *TemplateTaskMutation
	hooks    []Hook
}

// SetCreationDate sets the "creationDate" field.
func (ttc *TemplateTaskCreate) SetCreationDate(t time.Time) *TemplateTaskCreate {
	ttc.mutation.SetCreationDate(t)
	return ttc
}

// SetNillableCreationDate sets the "creationDate" field if the given value is not nil.
func (ttc *TemplateTaskCreate) SetNillableCreationDate(t *time.Time) *TemplateTaskCreate {
	if t != nil {
		ttc.SetCreationDate(*t)
	}
	return ttc
}

// SetWeekDay sets the "weekDay" field.
func (ttc *TemplateTaskCreate) SetWeekDay(i int) *TemplateTaskCreate {
	ttc.mutation.SetWeekDay(i)
	return ttc
}

// SetID sets the "id" field.
func (ttc *TemplateTaskCreate) SetID(u uuid.UUID) *TemplateTaskCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TemplateTaskCreate) SetNillableID(u *uuid.UUID) *TemplateTaskCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (ttc *TemplateTaskCreate) SetActivityID(id uuid.UUID) *TemplateTaskCreate {
	ttc.mutation.SetActivityID(id)
	return ttc
}

// SetActivity sets the "activity" edge to the Activity entity.
func (ttc *TemplateTaskCreate) SetActivity(a *Activity) *TemplateTaskCreate {
	return ttc.SetActivityID(a.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (ttc *TemplateTaskCreate) SetTemplateID(id uuid.UUID) *TemplateTaskCreate {
	ttc.mutation.SetTemplateID(id)
	return ttc
}

// SetTemplate sets the "template" edge to the Template entity.
func (ttc *TemplateTaskCreate) SetTemplate(t *Template) *TemplateTaskCreate {
	return ttc.SetTemplateID(t.ID)
}

// Mutation returns the TemplateTaskMutation object of the builder.
func (ttc *TemplateTaskCreate) Mutation() *TemplateTaskMutation {
	return ttc.mutation
}

// Save creates the TemplateTask in the database.
func (ttc *TemplateTaskCreate) Save(ctx context.Context) (*TemplateTask, error) {
	ttc.defaults()
	return withHooks[*TemplateTask, TemplateTaskMutation](ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TemplateTaskCreate) SaveX(ctx context.Context) *TemplateTask {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TemplateTaskCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TemplateTaskCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TemplateTaskCreate) defaults() {
	if _, ok := ttc.mutation.CreationDate(); !ok {
		v := templatetask.DefaultCreationDate()
		ttc.mutation.SetCreationDate(v)
	}
	if _, ok := ttc.mutation.ID(); !ok {
		v := templatetask.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TemplateTaskCreate) check() error {
	if _, ok := ttc.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creationDate", err: errors.New(`ent: missing required field "TemplateTask.creationDate"`)}
	}
	if _, ok := ttc.mutation.WeekDay(); !ok {
		return &ValidationError{Name: "weekDay", err: errors.New(`ent: missing required field "TemplateTask.weekDay"`)}
	}
	if _, ok := ttc.mutation.ActivityID(); !ok {
		return &ValidationError{Name: "activity", err: errors.New(`ent: missing required edge "TemplateTask.activity"`)}
	}
	if _, ok := ttc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required edge "TemplateTask.template"`)}
	}
	return nil
}

func (ttc *TemplateTaskCreate) sqlSave(ctx context.Context) (*TemplateTask, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TemplateTaskCreate) createSpec() (*TemplateTask, *sqlgraph.CreateSpec) {
	var (
		_node = &TemplateTask{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(templatetask.Table, sqlgraph.NewFieldSpec(templatetask.FieldID, field.TypeUUID))
	)
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttc.mutation.CreationDate(); ok {
		_spec.SetField(templatetask.FieldCreationDate, field.TypeTime, value)
		_node.CreationDate = value
	}
	if value, ok := ttc.mutation.WeekDay(); ok {
		_spec.SetField(templatetask.FieldWeekDay, field.TypeInt, value)
		_node.WeekDay = value
	}
	if nodes := ttc.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.ActivityTable,
			Columns: []string{templatetask.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.activity_template_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templatetask.TemplateTable,
			Columns: []string{templatetask.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.template_template_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TemplateTaskCreateBulk is the builder for creating many TemplateTask entities in bulk.
type TemplateTaskCreateBulk struct {
	config
	builders []*TemplateTaskCreate
}

// Save creates the TemplateTask entities in the database.
func (ttcb *TemplateTaskCreateBulk) Save(ctx context.Context) ([]*TemplateTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TemplateTask, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TemplateTaskCreateBulk) SaveX(ctx context.Context) []*TemplateTask {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TemplateTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TemplateTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
