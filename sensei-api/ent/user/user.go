// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreationDate holds the string denoting the creationdate field in the database.
	FieldCreationDate = "creation_date"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldDans holds the string denoting the dans field in the database.
	FieldDans = "dans"
	// FieldMailValid holds the string denoting the mailvalid field in the database.
	FieldMailValid = "mail_valid"
	// FieldTutorialCompleted holds the string denoting the tutorialcompleted field in the database.
	FieldTutorialCompleted = "tutorial_completed"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeTemplates holds the string denoting the templates edge name in mutations.
	EdgeTemplates = "templates"
	// EdgeCodes holds the string denoting the codes edge name in mutations.
	EdgeCodes = "codes"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "activities"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "user_activities"
	// TemplatesTable is the table that holds the templates relation/edge.
	TemplatesTable = "templates"
	// TemplatesInverseTable is the table name for the Template entity.
	// It exists in this package in order to avoid circular dependency with the "template" package.
	TemplatesInverseTable = "templates"
	// TemplatesColumn is the table column denoting the templates relation/edge.
	TemplatesColumn = "user_templates"
	// CodesTable is the table that holds the codes relation/edge.
	CodesTable = "verification_codes"
	// CodesInverseTable is the table name for the VerificationCode entity.
	// It exists in this package in order to avoid circular dependency with the "verificationcode" package.
	CodesInverseTable = "verification_codes"
	// CodesColumn is the table column denoting the codes relation/edge.
	CodesColumn = "user_codes"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "user_tasks"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreationDate,
	FieldUsername,
	FieldMail,
	FieldPassword,
	FieldDans,
	FieldMailValid,
	FieldTutorialCompleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreationDate holds the default value on creation for the "creationDate" field.
	DefaultCreationDate func() time.Time
	// UsernameValidator is a validator for the "Username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// MailValidator is a validator for the "Mail" field. It is called by the builders before save.
	MailValidator func(string) error
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultDans holds the default value on creation for the "Dans" field.
	DefaultDans int
	// DefaultMailValid holds the default value on creation for the "MailValid" field.
	DefaultMailValid bool
	// DefaultTutorialCompleted holds the default value on creation for the "TutorialCompleted" field.
	DefaultTutorialCompleted bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreationDate orders the results by the creationDate field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByUsername orders the results by the Username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByMail orders the results by the Mail field.
func ByMail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMail, opts...).ToFunc()
}

// ByPassword orders the results by the Password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByDans orders the results by the Dans field.
func ByDans(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDans, opts...).ToFunc()
}

// ByMailValid orders the results by the MailValid field.
func ByMailValid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMailValid, opts...).ToFunc()
}

// ByTutorialCompleted orders the results by the TutorialCompleted field.
func ByTutorialCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTutorialCompleted, opts...).ToFunc()
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTemplatesCount orders the results by templates count.
func ByTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemplatesStep(), opts...)
	}
}

// ByTemplates orders the results by templates terms.
func ByTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCodesCount orders the results by codes count.
func ByCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCodesStep(), opts...)
	}
}

// ByCodes orders the results by codes terms.
func ByCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemplatesTable, TemplatesColumn),
	)
}
func newCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CodesTable, CodesColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
