// Code generated by ent, DO NOT EDIT.

package templatetask

import (
	"sensei/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldLTE(FieldID, id))
}

// CreationDate applies equality check predicate on the "creationDate" field. It's identical to CreationDateEQ.
func CreationDate(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldEQ(FieldCreationDate, v))
}

// WeekDay applies equality check predicate on the "weekDay" field. It's identical to WeekDayEQ.
func WeekDay(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldEQ(FieldWeekDay, v))
}

// CreationDateEQ applies the EQ predicate on the "creationDate" field.
func CreationDateEQ(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldEQ(FieldCreationDate, v))
}

// CreationDateNEQ applies the NEQ predicate on the "creationDate" field.
func CreationDateNEQ(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldNEQ(FieldCreationDate, v))
}

// CreationDateIn applies the In predicate on the "creationDate" field.
func CreationDateIn(vs ...time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldIn(FieldCreationDate, vs...))
}

// CreationDateNotIn applies the NotIn predicate on the "creationDate" field.
func CreationDateNotIn(vs ...time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldNotIn(FieldCreationDate, vs...))
}

// CreationDateGT applies the GT predicate on the "creationDate" field.
func CreationDateGT(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldGT(FieldCreationDate, v))
}

// CreationDateGTE applies the GTE predicate on the "creationDate" field.
func CreationDateGTE(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldGTE(FieldCreationDate, v))
}

// CreationDateLT applies the LT predicate on the "creationDate" field.
func CreationDateLT(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldLT(FieldCreationDate, v))
}

// CreationDateLTE applies the LTE predicate on the "creationDate" field.
func CreationDateLTE(v time.Time) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldLTE(FieldCreationDate, v))
}

// WeekDayEQ applies the EQ predicate on the "weekDay" field.
func WeekDayEQ(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldEQ(FieldWeekDay, v))
}

// WeekDayNEQ applies the NEQ predicate on the "weekDay" field.
func WeekDayNEQ(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldNEQ(FieldWeekDay, v))
}

// WeekDayIn applies the In predicate on the "weekDay" field.
func WeekDayIn(vs ...int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldIn(FieldWeekDay, vs...))
}

// WeekDayNotIn applies the NotIn predicate on the "weekDay" field.
func WeekDayNotIn(vs ...int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldNotIn(FieldWeekDay, vs...))
}

// WeekDayGT applies the GT predicate on the "weekDay" field.
func WeekDayGT(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldGT(FieldWeekDay, v))
}

// WeekDayGTE applies the GTE predicate on the "weekDay" field.
func WeekDayGTE(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldGTE(FieldWeekDay, v))
}

// WeekDayLT applies the LT predicate on the "weekDay" field.
func WeekDayLT(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldLT(FieldWeekDay, v))
}

// WeekDayLTE applies the LTE predicate on the "weekDay" field.
func WeekDayLTE(v int) predicate.TemplateTask {
	return predicate.TemplateTask(sql.FieldLTE(FieldWeekDay, v))
}

// HasActivity applies the HasEdge predicate on the "activity" edge.
func HasActivity() predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivityTable, ActivityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivityWith applies the HasEdge predicate on the "activity" edge with a given conditions (other predicates).
func HasActivityWith(preds ...predicate.Activity) predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		step := newActivityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.Template) predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		step := newTemplateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TemplateTask) predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TemplateTask) predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TemplateTask) predicate.TemplateTask {
	return predicate.TemplateTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
