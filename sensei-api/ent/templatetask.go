// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sensei/ent/activity"
	"sensei/ent/template"
	"sensei/ent/templatetask"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TemplateTask is the model entity for the TemplateTask schema.
type TemplateTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreationDate holds the value of the "creationDate" field.
	CreationDate time.Time `json:"creationDate,omitempty"`
	// WeekDay holds the value of the "weekDay" field.
	WeekDay int `json:"weekDay,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateTaskQuery when eager-loading is set.
	Edges                   TemplateTaskEdges `json:"edges"`
	activity_template_tasks *uuid.UUID
	template_template_tasks *uuid.UUID
	selectValues            sql.SelectValues
}

// TemplateTaskEdges holds the relations/edges for other nodes in the graph.
type TemplateTaskEdges struct {
	// Activity holds the value of the activity edge.
	Activity *Activity `json:"activity,omitempty"`
	// Template holds the value of the template edge.
	Template *Template `json:"template,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateTaskEdges) ActivityOrErr() (*Activity, error) {
	if e.loadedTypes[0] {
		if e.Activity == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: activity.Label}
		}
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateTaskEdges) TemplateOrErr() (*Template, error) {
	if e.loadedTypes[1] {
		if e.Template == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: template.Label}
		}
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemplateTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case templatetask.FieldWeekDay:
			values[i] = new(sql.NullInt64)
		case templatetask.FieldCreationDate:
			values[i] = new(sql.NullTime)
		case templatetask.FieldID:
			values[i] = new(uuid.UUID)
		case templatetask.ForeignKeys[0]: // activity_template_tasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case templatetask.ForeignKeys[1]: // template_template_tasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemplateTask fields.
func (tt *TemplateTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case templatetask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case templatetask.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creationDate", values[i])
			} else if value.Valid {
				tt.CreationDate = value.Time
			}
		case templatetask.FieldWeekDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekDay", values[i])
			} else if value.Valid {
				tt.WeekDay = int(value.Int64)
			}
		case templatetask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field activity_template_tasks", values[i])
			} else if value.Valid {
				tt.activity_template_tasks = new(uuid.UUID)
				*tt.activity_template_tasks = *value.S.(*uuid.UUID)
			}
		case templatetask.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field template_template_tasks", values[i])
			} else if value.Valid {
				tt.template_template_tasks = new(uuid.UUID)
				*tt.template_template_tasks = *value.S.(*uuid.UUID)
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TemplateTask.
// This includes values selected through modifiers, order, etc.
func (tt *TemplateTask) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryActivity queries the "activity" edge of the TemplateTask entity.
func (tt *TemplateTask) QueryActivity() *ActivityQuery {
	return NewTemplateTaskClient(tt.config).QueryActivity(tt)
}

// QueryTemplate queries the "template" edge of the TemplateTask entity.
func (tt *TemplateTask) QueryTemplate() *TemplateQuery {
	return NewTemplateTaskClient(tt.config).QueryTemplate(tt)
}

// Update returns a builder for updating this TemplateTask.
// Note that you need to call TemplateTask.Unwrap() before calling this method if this TemplateTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TemplateTask) Update() *TemplateTaskUpdateOne {
	return NewTemplateTaskClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TemplateTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TemplateTask) Unwrap() *TemplateTask {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TemplateTask is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TemplateTask) String() string {
	var builder strings.Builder
	builder.WriteString("TemplateTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("creationDate=")
	builder.WriteString(tt.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("weekDay=")
	builder.WriteString(fmt.Sprintf("%v", tt.WeekDay))
	builder.WriteByte(')')
	return builder.String()
}

// TemplateTasks is a parsable slice of TemplateTask.
type TemplateTasks []*TemplateTask
