// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sensei/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreationDate holds the value of the "creationDate" field.
	CreationDate time.Time `json:"creationDate,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"username"`
	// Mail holds the value of the "Mail" field.
	Mail string `json:"mail"`
	// Password holds the value of the "Password" field.
	Password string `json:"-"`
	// Dans holds the value of the "Dans" field.
	Dans int `json:"dans"`
	// MailValid holds the value of the "MailValid" field.
	MailValid bool `json:"mailValid"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*Activity `json:"activities,omitempty"`
	// Codes holds the value of the codes edge.
	Codes []*VerificationCode `json:"codes,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// CodesOrErr returns the Codes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CodesOrErr() ([]*VerificationCode, error) {
	if e.loadedTypes[1] {
		return e.Codes, nil
	}
	return nil, &NotLoadedError{edge: "codes"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldMailValid:
			values[i] = new(sql.NullBool)
		case user.FieldDans:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldMail, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.FieldCreationDate:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creationDate", values[i])
			} else if value.Valid {
				u.CreationDate = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mail", values[i])
			} else if value.Valid {
				u.Mail = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldDans:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Dans", values[i])
			} else if value.Valid {
				u.Dans = int(value.Int64)
			}
		case user.FieldMailValid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field MailValid", values[i])
			} else if value.Valid {
				u.MailValid = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryActivities queries the "activities" edge of the User entity.
func (u *User) QueryActivities() *ActivityQuery {
	return NewUserClient(u.config).QueryActivities(u)
}

// QueryCodes queries the "codes" edge of the User entity.
func (u *User) QueryCodes() *VerificationCodeQuery {
	return NewUserClient(u.config).QueryCodes(u)
}

// QueryTasks queries the "tasks" edge of the User entity.
func (u *User) QueryTasks() *TaskQuery {
	return NewUserClient(u.config).QueryTasks(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("creationDate=")
	builder.WriteString(u.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("Mail=")
	builder.WriteString(u.Mail)
	builder.WriteString(", ")
	builder.WriteString("Password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("Dans=")
	builder.WriteString(fmt.Sprintf("%v", u.Dans))
	builder.WriteString(", ")
	builder.WriteString("MailValid=")
	builder.WriteString(fmt.Sprintf("%v", u.MailValid))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
