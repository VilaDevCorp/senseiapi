// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sensei/ent/activity"
	"sensei/ent/predicate"
	"sensei/ent/task"
	"sensei/ent/template"
	"sensei/ent/templatetask"
	"sensei/ent/user"
	"sensei/ent/verificationcode"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivity         = "Activity"
	TypeTask             = "Task"
	TypeTemplate         = "Template"
	TypeTemplateTask     = "TemplateTask"
	TypeUser             = "User"
	TypeVerificationCode = "VerificationCode"
)

// ActivityMutation represents an operation that mutates the Activity nodes in the graph.
type ActivityMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	creationDate         *time.Time
	name                 *string
	description          *string
	icon                 *string
	size                 *int
	addsize              *int
	clearedFields        map[string]struct{}
	user                 *uuid.UUID
	cleareduser          bool
	tasks                map[uuid.UUID]struct{}
	removedtasks         map[uuid.UUID]struct{}
	clearedtasks         bool
	templateTasks        map[uuid.UUID]struct{}
	removedtemplateTasks map[uuid.UUID]struct{}
	clearedtemplateTasks bool
	done                 bool
	oldValue             func(context.Context) (*Activity, error)
	predicates           []predicate.Activity
}

var _ ent.Mutation = (*ActivityMutation)(nil)

// activityOption allows management of the mutation configuration using functional options.
type activityOption func(*ActivityMutation)

// newActivityMutation creates new mutation for the Activity entity.
func newActivityMutation(c config, op Op, opts ...activityOption) *ActivityMutation {
	m := &ActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityID sets the ID field of the mutation.
func withActivityID(id uuid.UUID) activityOption {
	return func(m *ActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *Activity
		)
		m.oldValue = func(ctx context.Context) (*Activity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivity sets the old Activity of the mutation.
func withActivity(node *Activity) activityOption {
	return func(m *ActivityMutation) {
		m.oldValue = func(context.Context) (*Activity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Activity entities.
func (m *ActivityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActivityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActivityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Activity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *ActivityMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *ActivityMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *ActivityMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetName sets the "name" field.
func (m *ActivityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActivityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActivityMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ActivityMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ActivityMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ActivityMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[activity.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ActivityMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[activity.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ActivityMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, activity.FieldDescription)
}

// SetIcon sets the "icon" field.
func (m *ActivityMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *ActivityMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *ActivityMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[activity.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *ActivityMutation) IconCleared() bool {
	_, ok := m.clearedFields[activity.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *ActivityMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, activity.FieldIcon)
}

// SetSize sets the "size" field.
func (m *ActivityMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *ActivityMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *ActivityMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *ActivityMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *ActivityMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ActivityMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ActivityMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ActivityMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ActivityMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ActivityMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ActivityMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *ActivityMutation) AddTaskIDs(ids ...uuid.UUID) {
	if m.tasks == nil {
		m.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *ActivityMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *ActivityMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *ActivityMutation) RemoveTaskIDs(ids ...uuid.UUID) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *ActivityMutation) RemovedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *ActivityMutation) TasksIDs() (ids []uuid.UUID) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *ActivityMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// AddTemplateTaskIDs adds the "templateTasks" edge to the TemplateTask entity by ids.
func (m *ActivityMutation) AddTemplateTaskIDs(ids ...uuid.UUID) {
	if m.templateTasks == nil {
		m.templateTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.templateTasks[ids[i]] = struct{}{}
	}
}

// ClearTemplateTasks clears the "templateTasks" edge to the TemplateTask entity.
func (m *ActivityMutation) ClearTemplateTasks() {
	m.clearedtemplateTasks = true
}

// TemplateTasksCleared reports if the "templateTasks" edge to the TemplateTask entity was cleared.
func (m *ActivityMutation) TemplateTasksCleared() bool {
	return m.clearedtemplateTasks
}

// RemoveTemplateTaskIDs removes the "templateTasks" edge to the TemplateTask entity by IDs.
func (m *ActivityMutation) RemoveTemplateTaskIDs(ids ...uuid.UUID) {
	if m.removedtemplateTasks == nil {
		m.removedtemplateTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.templateTasks, ids[i])
		m.removedtemplateTasks[ids[i]] = struct{}{}
	}
}

// RemovedTemplateTasks returns the removed IDs of the "templateTasks" edge to the TemplateTask entity.
func (m *ActivityMutation) RemovedTemplateTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedtemplateTasks {
		ids = append(ids, id)
	}
	return
}

// TemplateTasksIDs returns the "templateTasks" edge IDs in the mutation.
func (m *ActivityMutation) TemplateTasksIDs() (ids []uuid.UUID) {
	for id := range m.templateTasks {
		ids = append(ids, id)
	}
	return
}

// ResetTemplateTasks resets all changes to the "templateTasks" edge.
func (m *ActivityMutation) ResetTemplateTasks() {
	m.templateTasks = nil
	m.clearedtemplateTasks = false
	m.removedtemplateTasks = nil
}

// Where appends a list predicates to the ActivityMutation builder.
func (m *ActivityMutation) Where(ps ...predicate.Activity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActivityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActivityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Activity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActivityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActivityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Activity).
func (m *ActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActivityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.creationDate != nil {
		fields = append(fields, activity.FieldCreationDate)
	}
	if m.name != nil {
		fields = append(fields, activity.FieldName)
	}
	if m.description != nil {
		fields = append(fields, activity.FieldDescription)
	}
	if m.icon != nil {
		fields = append(fields, activity.FieldIcon)
	}
	if m.size != nil {
		fields = append(fields, activity.FieldSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldCreationDate:
		return m.CreationDate()
	case activity.FieldName:
		return m.Name()
	case activity.FieldDescription:
		return m.Description()
	case activity.FieldIcon:
		return m.Icon()
	case activity.FieldSize:
		return m.Size()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activity.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case activity.FieldName:
		return m.OldName(ctx)
	case activity.FieldDescription:
		return m.OldDescription(ctx)
	case activity.FieldIcon:
		return m.OldIcon(ctx)
	case activity.FieldSize:
		return m.OldSize(ctx)
	}
	return nil, fmt.Errorf("unknown Activity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activity.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case activity.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case activity.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case activity.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case activity.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActivityMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, activity.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActivityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case activity.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Activity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActivityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(activity.FieldDescription) {
		fields = append(fields, activity.FieldDescription)
	}
	if m.FieldCleared(activity.FieldIcon) {
		fields = append(fields, activity.FieldIcon)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityMutation) ClearField(name string) error {
	switch name {
	case activity.FieldDescription:
		m.ClearDescription()
		return nil
	case activity.FieldIcon:
		m.ClearIcon()
		return nil
	}
	return fmt.Errorf("unknown Activity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActivityMutation) ResetField(name string) error {
	switch name {
	case activity.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case activity.FieldName:
		m.ResetName()
		return nil
	case activity.FieldDescription:
		m.ResetDescription()
		return nil
	case activity.FieldIcon:
		m.ResetIcon()
		return nil
	case activity.FieldSize:
		m.ResetSize()
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, activity.EdgeUser)
	}
	if m.tasks != nil {
		edges = append(edges, activity.EdgeTasks)
	}
	if m.templateTasks != nil {
		edges = append(edges, activity.EdgeTemplateTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActivityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case activity.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case activity.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case activity.EdgeTemplateTasks:
		ids := make([]ent.Value, 0, len(m.templateTasks))
		for id := range m.templateTasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtasks != nil {
		edges = append(edges, activity.EdgeTasks)
	}
	if m.removedtemplateTasks != nil {
		edges = append(edges, activity.EdgeTemplateTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActivityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case activity.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	case activity.EdgeTemplateTasks:
		ids := make([]ent.Value, 0, len(m.removedtemplateTasks))
		for id := range m.removedtemplateTasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, activity.EdgeUser)
	}
	if m.clearedtasks {
		edges = append(edges, activity.EdgeTasks)
	}
	if m.clearedtemplateTasks {
		edges = append(edges, activity.EdgeTemplateTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActivityMutation) EdgeCleared(name string) bool {
	switch name {
	case activity.EdgeUser:
		return m.cleareduser
	case activity.EdgeTasks:
		return m.clearedtasks
	case activity.EdgeTemplateTasks:
		return m.clearedtemplateTasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActivityMutation) ClearEdge(name string) error {
	switch name {
	case activity.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Activity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActivityMutation) ResetEdge(name string) error {
	switch name {
	case activity.EdgeUser:
		m.ResetUser()
		return nil
	case activity.EdgeTasks:
		m.ResetTasks()
		return nil
	case activity.EdgeTemplateTasks:
		m.ResetTemplateTasks()
		return nil
	}
	return fmt.Errorf("unknown Activity edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	creationDate    *time.Time
	dueDate         *time.Time
	completed       *bool
	clearedFields   map[string]struct{}
	activity        *uuid.UUID
	clearedactivity bool
	user            *uuid.UUID
	cleareduser     bool
	done            bool
	oldValue        func(context.Context) (*Task, error)
	predicates      []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uuid.UUID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *TaskMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *TaskMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *TaskMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetDueDate sets the "dueDate" field.
func (m *TaskMutation) SetDueDate(t time.Time) {
	m.dueDate = &t
}

// DueDate returns the value of the "dueDate" field in the mutation.
func (m *TaskMutation) DueDate() (r time.Time, exists bool) {
	v := m.dueDate
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "dueDate" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDueDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ResetDueDate resets all changes to the "dueDate" field.
func (m *TaskMutation) ResetDueDate() {
	m.dueDate = nil
}

// SetCompleted sets the "completed" field.
func (m *TaskMutation) SetCompleted(b bool) {
	m.completed = &b
}

// Completed returns the value of the "completed" field in the mutation.
func (m *TaskMutation) Completed() (r bool, exists bool) {
	v := m.completed
	if v == nil {
		return
	}
	return *v, true
}

// OldCompleted returns the old "completed" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompleted: %w", err)
	}
	return oldValue.Completed, nil
}

// ResetCompleted resets all changes to the "completed" field.
func (m *TaskMutation) ResetCompleted() {
	m.completed = nil
}

// SetActivityID sets the "activity" edge to the Activity entity by id.
func (m *TaskMutation) SetActivityID(id uuid.UUID) {
	m.activity = &id
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (m *TaskMutation) ClearActivity() {
	m.clearedactivity = true
}

// ActivityCleared reports if the "activity" edge to the Activity entity was cleared.
func (m *TaskMutation) ActivityCleared() bool {
	return m.clearedactivity
}

// ActivityID returns the "activity" edge ID in the mutation.
func (m *TaskMutation) ActivityID() (id uuid.UUID, exists bool) {
	if m.activity != nil {
		return *m.activity, true
	}
	return
}

// ActivityIDs returns the "activity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActivityID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) ActivityIDs() (ids []uuid.UUID) {
	if id := m.activity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActivity resets all changes to the "activity" edge.
func (m *TaskMutation) ResetActivity() {
	m.activity = nil
	m.clearedactivity = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TaskMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TaskMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TaskMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TaskMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TaskMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.creationDate != nil {
		fields = append(fields, task.FieldCreationDate)
	}
	if m.dueDate != nil {
		fields = append(fields, task.FieldDueDate)
	}
	if m.completed != nil {
		fields = append(fields, task.FieldCompleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreationDate:
		return m.CreationDate()
	case task.FieldDueDate:
		return m.DueDate()
	case task.FieldCompleted:
		return m.Completed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case task.FieldDueDate:
		return m.OldDueDate(ctx)
	case task.FieldCompleted:
		return m.OldCompleted(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case task.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case task.FieldCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompleted(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case task.FieldDueDate:
		m.ResetDueDate()
		return nil
	case task.FieldCompleted:
		m.ResetCompleted()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.activity != nil {
		edges = append(edges, task.EdgeActivity)
	}
	if m.user != nil {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeActivity:
		if id := m.activity; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedactivity {
		edges = append(edges, task.EdgeActivity)
	}
	if m.cleareduser {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeActivity:
		return m.clearedactivity
	case task.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeActivity:
		m.ClearActivity()
		return nil
	case task.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeActivity:
		m.ResetActivity()
		return nil
	case task.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TemplateMutation represents an operation that mutates the Template nodes in the graph.
type TemplateMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	creationDate         *time.Time
	name                 *string
	clearedFields        map[string]struct{}
	user                 *uuid.UUID
	cleareduser          bool
	templateTasks        map[uuid.UUID]struct{}
	removedtemplateTasks map[uuid.UUID]struct{}
	clearedtemplateTasks bool
	done                 bool
	oldValue             func(context.Context) (*Template, error)
	predicates           []predicate.Template
}

var _ ent.Mutation = (*TemplateMutation)(nil)

// templateOption allows management of the mutation configuration using functional options.
type templateOption func(*TemplateMutation)

// newTemplateMutation creates new mutation for the Template entity.
func newTemplateMutation(c config, op Op, opts ...templateOption) *TemplateMutation {
	m := &TemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTemplateID sets the ID field of the mutation.
func withTemplateID(id uuid.UUID) templateOption {
	return func(m *TemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *Template
		)
		m.oldValue = func(ctx context.Context) (*Template, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Template.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTemplate sets the old Template of the mutation.
func withTemplate(node *Template) templateOption {
	return func(m *TemplateMutation) {
		m.oldValue = func(context.Context) (*Template, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Template entities.
func (m *TemplateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TemplateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TemplateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Template.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *TemplateMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *TemplateMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the Template entity.
// If the Template object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *TemplateMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetName sets the "name" field.
func (m *TemplateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TemplateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Template entity.
// If the Template object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TemplateMutation) ResetName() {
	m.name = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TemplateMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TemplateMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TemplateMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TemplateMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TemplateMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TemplateMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddTemplateTaskIDs adds the "templateTasks" edge to the TemplateTask entity by ids.
func (m *TemplateMutation) AddTemplateTaskIDs(ids ...uuid.UUID) {
	if m.templateTasks == nil {
		m.templateTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.templateTasks[ids[i]] = struct{}{}
	}
}

// ClearTemplateTasks clears the "templateTasks" edge to the TemplateTask entity.
func (m *TemplateMutation) ClearTemplateTasks() {
	m.clearedtemplateTasks = true
}

// TemplateTasksCleared reports if the "templateTasks" edge to the TemplateTask entity was cleared.
func (m *TemplateMutation) TemplateTasksCleared() bool {
	return m.clearedtemplateTasks
}

// RemoveTemplateTaskIDs removes the "templateTasks" edge to the TemplateTask entity by IDs.
func (m *TemplateMutation) RemoveTemplateTaskIDs(ids ...uuid.UUID) {
	if m.removedtemplateTasks == nil {
		m.removedtemplateTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.templateTasks, ids[i])
		m.removedtemplateTasks[ids[i]] = struct{}{}
	}
}

// RemovedTemplateTasks returns the removed IDs of the "templateTasks" edge to the TemplateTask entity.
func (m *TemplateMutation) RemovedTemplateTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedtemplateTasks {
		ids = append(ids, id)
	}
	return
}

// TemplateTasksIDs returns the "templateTasks" edge IDs in the mutation.
func (m *TemplateMutation) TemplateTasksIDs() (ids []uuid.UUID) {
	for id := range m.templateTasks {
		ids = append(ids, id)
	}
	return
}

// ResetTemplateTasks resets all changes to the "templateTasks" edge.
func (m *TemplateMutation) ResetTemplateTasks() {
	m.templateTasks = nil
	m.clearedtemplateTasks = false
	m.removedtemplateTasks = nil
}

// Where appends a list predicates to the TemplateMutation builder.
func (m *TemplateMutation) Where(ps ...predicate.Template) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TemplateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TemplateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Template, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TemplateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TemplateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Template).
func (m *TemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TemplateMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.creationDate != nil {
		fields = append(fields, template.FieldCreationDate)
	}
	if m.name != nil {
		fields = append(fields, template.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case template.FieldCreationDate:
		return m.CreationDate()
	case template.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case template.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case template.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Template field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case template.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case template.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Template field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Template numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TemplateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TemplateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Template nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TemplateMutation) ResetField(name string) error {
	switch name {
	case template.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case template.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Template field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, template.EdgeUser)
	}
	if m.templateTasks != nil {
		edges = append(edges, template.EdgeTemplateTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case template.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case template.EdgeTemplateTasks:
		ids := make([]ent.Value, 0, len(m.templateTasks))
		for id := range m.templateTasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtemplateTasks != nil {
		edges = append(edges, template.EdgeTemplateTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case template.EdgeTemplateTasks:
		ids := make([]ent.Value, 0, len(m.removedtemplateTasks))
		for id := range m.removedtemplateTasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, template.EdgeUser)
	}
	if m.clearedtemplateTasks {
		edges = append(edges, template.EdgeTemplateTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case template.EdgeUser:
		return m.cleareduser
	case template.EdgeTemplateTasks:
		return m.clearedtemplateTasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TemplateMutation) ClearEdge(name string) error {
	switch name {
	case template.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Template unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TemplateMutation) ResetEdge(name string) error {
	switch name {
	case template.EdgeUser:
		m.ResetUser()
		return nil
	case template.EdgeTemplateTasks:
		m.ResetTemplateTasks()
		return nil
	}
	return fmt.Errorf("unknown Template edge %s", name)
}

// TemplateTaskMutation represents an operation that mutates the TemplateTask nodes in the graph.
type TemplateTaskMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	creationDate    *time.Time
	weekDay         *int
	addweekDay      *int
	clearedFields   map[string]struct{}
	activity        *uuid.UUID
	clearedactivity bool
	template        *uuid.UUID
	clearedtemplate bool
	done            bool
	oldValue        func(context.Context) (*TemplateTask, error)
	predicates      []predicate.TemplateTask
}

var _ ent.Mutation = (*TemplateTaskMutation)(nil)

// templatetaskOption allows management of the mutation configuration using functional options.
type templatetaskOption func(*TemplateTaskMutation)

// newTemplateTaskMutation creates new mutation for the TemplateTask entity.
func newTemplateTaskMutation(c config, op Op, opts ...templatetaskOption) *TemplateTaskMutation {
	m := &TemplateTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTemplateTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTemplateTaskID sets the ID field of the mutation.
func withTemplateTaskID(id uuid.UUID) templatetaskOption {
	return func(m *TemplateTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *TemplateTask
		)
		m.oldValue = func(ctx context.Context) (*TemplateTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TemplateTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTemplateTask sets the old TemplateTask of the mutation.
func withTemplateTask(node *TemplateTask) templatetaskOption {
	return func(m *TemplateTaskMutation) {
		m.oldValue = func(context.Context) (*TemplateTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TemplateTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TemplateTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TemplateTask entities.
func (m *TemplateTaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TemplateTaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TemplateTaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TemplateTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *TemplateTaskMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *TemplateTaskMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the TemplateTask entity.
// If the TemplateTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateTaskMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *TemplateTaskMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetWeekDay sets the "weekDay" field.
func (m *TemplateTaskMutation) SetWeekDay(i int) {
	m.weekDay = &i
	m.addweekDay = nil
}

// WeekDay returns the value of the "weekDay" field in the mutation.
func (m *TemplateTaskMutation) WeekDay() (r int, exists bool) {
	v := m.weekDay
	if v == nil {
		return
	}
	return *v, true
}

// OldWeekDay returns the old "weekDay" field's value of the TemplateTask entity.
// If the TemplateTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateTaskMutation) OldWeekDay(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeekDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeekDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeekDay: %w", err)
	}
	return oldValue.WeekDay, nil
}

// AddWeekDay adds i to the "weekDay" field.
func (m *TemplateTaskMutation) AddWeekDay(i int) {
	if m.addweekDay != nil {
		*m.addweekDay += i
	} else {
		m.addweekDay = &i
	}
}

// AddedWeekDay returns the value that was added to the "weekDay" field in this mutation.
func (m *TemplateTaskMutation) AddedWeekDay() (r int, exists bool) {
	v := m.addweekDay
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeekDay resets all changes to the "weekDay" field.
func (m *TemplateTaskMutation) ResetWeekDay() {
	m.weekDay = nil
	m.addweekDay = nil
}

// SetActivityID sets the "activity" edge to the Activity entity by id.
func (m *TemplateTaskMutation) SetActivityID(id uuid.UUID) {
	m.activity = &id
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (m *TemplateTaskMutation) ClearActivity() {
	m.clearedactivity = true
}

// ActivityCleared reports if the "activity" edge to the Activity entity was cleared.
func (m *TemplateTaskMutation) ActivityCleared() bool {
	return m.clearedactivity
}

// ActivityID returns the "activity" edge ID in the mutation.
func (m *TemplateTaskMutation) ActivityID() (id uuid.UUID, exists bool) {
	if m.activity != nil {
		return *m.activity, true
	}
	return
}

// ActivityIDs returns the "activity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActivityID instead. It exists only for internal usage by the builders.
func (m *TemplateTaskMutation) ActivityIDs() (ids []uuid.UUID) {
	if id := m.activity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActivity resets all changes to the "activity" edge.
func (m *TemplateTaskMutation) ResetActivity() {
	m.activity = nil
	m.clearedactivity = false
}

// SetTemplateID sets the "template" edge to the Template entity by id.
func (m *TemplateTaskMutation) SetTemplateID(id uuid.UUID) {
	m.template = &id
}

// ClearTemplate clears the "template" edge to the Template entity.
func (m *TemplateTaskMutation) ClearTemplate() {
	m.clearedtemplate = true
}

// TemplateCleared reports if the "template" edge to the Template entity was cleared.
func (m *TemplateTaskMutation) TemplateCleared() bool {
	return m.clearedtemplate
}

// TemplateID returns the "template" edge ID in the mutation.
func (m *TemplateTaskMutation) TemplateID() (id uuid.UUID, exists bool) {
	if m.template != nil {
		return *m.template, true
	}
	return
}

// TemplateIDs returns the "template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TemplateID instead. It exists only for internal usage by the builders.
func (m *TemplateTaskMutation) TemplateIDs() (ids []uuid.UUID) {
	if id := m.template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTemplate resets all changes to the "template" edge.
func (m *TemplateTaskMutation) ResetTemplate() {
	m.template = nil
	m.clearedtemplate = false
}

// Where appends a list predicates to the TemplateTaskMutation builder.
func (m *TemplateTaskMutation) Where(ps ...predicate.TemplateTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TemplateTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TemplateTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TemplateTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TemplateTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TemplateTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TemplateTask).
func (m *TemplateTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TemplateTaskMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.creationDate != nil {
		fields = append(fields, templatetask.FieldCreationDate)
	}
	if m.weekDay != nil {
		fields = append(fields, templatetask.FieldWeekDay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TemplateTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case templatetask.FieldCreationDate:
		return m.CreationDate()
	case templatetask.FieldWeekDay:
		return m.WeekDay()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TemplateTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case templatetask.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case templatetask.FieldWeekDay:
		return m.OldWeekDay(ctx)
	}
	return nil, fmt.Errorf("unknown TemplateTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case templatetask.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case templatetask.FieldWeekDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeekDay(v)
		return nil
	}
	return fmt.Errorf("unknown TemplateTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TemplateTaskMutation) AddedFields() []string {
	var fields []string
	if m.addweekDay != nil {
		fields = append(fields, templatetask.FieldWeekDay)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TemplateTaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case templatetask.FieldWeekDay:
		return m.AddedWeekDay()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case templatetask.FieldWeekDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeekDay(v)
		return nil
	}
	return fmt.Errorf("unknown TemplateTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TemplateTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TemplateTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TemplateTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TemplateTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TemplateTaskMutation) ResetField(name string) error {
	switch name {
	case templatetask.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case templatetask.FieldWeekDay:
		m.ResetWeekDay()
		return nil
	}
	return fmt.Errorf("unknown TemplateTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TemplateTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.activity != nil {
		edges = append(edges, templatetask.EdgeActivity)
	}
	if m.template != nil {
		edges = append(edges, templatetask.EdgeTemplate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TemplateTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case templatetask.EdgeActivity:
		if id := m.activity; id != nil {
			return []ent.Value{*id}
		}
	case templatetask.EdgeTemplate:
		if id := m.template; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TemplateTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TemplateTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TemplateTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedactivity {
		edges = append(edges, templatetask.EdgeActivity)
	}
	if m.clearedtemplate {
		edges = append(edges, templatetask.EdgeTemplate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TemplateTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case templatetask.EdgeActivity:
		return m.clearedactivity
	case templatetask.EdgeTemplate:
		return m.clearedtemplate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TemplateTaskMutation) ClearEdge(name string) error {
	switch name {
	case templatetask.EdgeActivity:
		m.ClearActivity()
		return nil
	case templatetask.EdgeTemplate:
		m.ClearTemplate()
		return nil
	}
	return fmt.Errorf("unknown TemplateTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TemplateTaskMutation) ResetEdge(name string) error {
	switch name {
	case templatetask.EdgeActivity:
		m.ResetActivity()
		return nil
	case templatetask.EdgeTemplate:
		m.ResetTemplate()
		return nil
	}
	return fmt.Errorf("unknown TemplateTask edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	creationDate       *time.Time
	_Username          *string
	_Mail              *string
	_Password          *string
	_Dans              *int
	add_Dans           *int
	_MailValid         *bool
	_TutorialCompleted *bool
	clearedFields      map[string]struct{}
	activities         map[uuid.UUID]struct{}
	removedactivities  map[uuid.UUID]struct{}
	clearedactivities  bool
	templates          map[uuid.UUID]struct{}
	removedtemplates   map[uuid.UUID]struct{}
	clearedtemplates   bool
	codes              map[uuid.UUID]struct{}
	removedcodes       map[uuid.UUID]struct{}
	clearedcodes       bool
	tasks              map[uuid.UUID]struct{}
	removedtasks       map[uuid.UUID]struct{}
	clearedtasks       bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *UserMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *UserMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *UserMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetUsername sets the "Username" field.
func (m *UserMutation) SetUsername(s string) {
	m._Username = &s
}

// Username returns the value of the "Username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m._Username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "Username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "Username" field.
func (m *UserMutation) ResetUsername() {
	m._Username = nil
}

// SetMail sets the "Mail" field.
func (m *UserMutation) SetMail(s string) {
	m._Mail = &s
}

// Mail returns the value of the "Mail" field in the mutation.
func (m *UserMutation) Mail() (r string, exists bool) {
	v := m._Mail
	if v == nil {
		return
	}
	return *v, true
}

// OldMail returns the old "Mail" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMail: %w", err)
	}
	return oldValue.Mail, nil
}

// ResetMail resets all changes to the "Mail" field.
func (m *UserMutation) ResetMail() {
	m._Mail = nil
}

// SetPassword sets the "Password" field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the value of the "Password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "Password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// SetDans sets the "Dans" field.
func (m *UserMutation) SetDans(i int) {
	m._Dans = &i
	m.add_Dans = nil
}

// Dans returns the value of the "Dans" field in the mutation.
func (m *UserMutation) Dans() (r int, exists bool) {
	v := m._Dans
	if v == nil {
		return
	}
	return *v, true
}

// OldDans returns the old "Dans" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDans(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDans is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDans requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDans: %w", err)
	}
	return oldValue.Dans, nil
}

// AddDans adds i to the "Dans" field.
func (m *UserMutation) AddDans(i int) {
	if m.add_Dans != nil {
		*m.add_Dans += i
	} else {
		m.add_Dans = &i
	}
}

// AddedDans returns the value that was added to the "Dans" field in this mutation.
func (m *UserMutation) AddedDans() (r int, exists bool) {
	v := m.add_Dans
	if v == nil {
		return
	}
	return *v, true
}

// ResetDans resets all changes to the "Dans" field.
func (m *UserMutation) ResetDans() {
	m._Dans = nil
	m.add_Dans = nil
}

// SetMailValid sets the "MailValid" field.
func (m *UserMutation) SetMailValid(b bool) {
	m._MailValid = &b
}

// MailValid returns the value of the "MailValid" field in the mutation.
func (m *UserMutation) MailValid() (r bool, exists bool) {
	v := m._MailValid
	if v == nil {
		return
	}
	return *v, true
}

// OldMailValid returns the old "MailValid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMailValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMailValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMailValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMailValid: %w", err)
	}
	return oldValue.MailValid, nil
}

// ResetMailValid resets all changes to the "MailValid" field.
func (m *UserMutation) ResetMailValid() {
	m._MailValid = nil
}

// SetTutorialCompleted sets the "TutorialCompleted" field.
func (m *UserMutation) SetTutorialCompleted(b bool) {
	m._TutorialCompleted = &b
}

// TutorialCompleted returns the value of the "TutorialCompleted" field in the mutation.
func (m *UserMutation) TutorialCompleted() (r bool, exists bool) {
	v := m._TutorialCompleted
	if v == nil {
		return
	}
	return *v, true
}

// OldTutorialCompleted returns the old "TutorialCompleted" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTutorialCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTutorialCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTutorialCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTutorialCompleted: %w", err)
	}
	return oldValue.TutorialCompleted, nil
}

// ResetTutorialCompleted resets all changes to the "TutorialCompleted" field.
func (m *UserMutation) ResetTutorialCompleted() {
	m._TutorialCompleted = nil
}

// AddActivityIDs adds the "activities" edge to the Activity entity by ids.
func (m *UserMutation) AddActivityIDs(ids ...uuid.UUID) {
	if m.activities == nil {
		m.activities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.activities[ids[i]] = struct{}{}
	}
}

// ClearActivities clears the "activities" edge to the Activity entity.
func (m *UserMutation) ClearActivities() {
	m.clearedactivities = true
}

// ActivitiesCleared reports if the "activities" edge to the Activity entity was cleared.
func (m *UserMutation) ActivitiesCleared() bool {
	return m.clearedactivities
}

// RemoveActivityIDs removes the "activities" edge to the Activity entity by IDs.
func (m *UserMutation) RemoveActivityIDs(ids ...uuid.UUID) {
	if m.removedactivities == nil {
		m.removedactivities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.activities, ids[i])
		m.removedactivities[ids[i]] = struct{}{}
	}
}

// RemovedActivities returns the removed IDs of the "activities" edge to the Activity entity.
func (m *UserMutation) RemovedActivitiesIDs() (ids []uuid.UUID) {
	for id := range m.removedactivities {
		ids = append(ids, id)
	}
	return
}

// ActivitiesIDs returns the "activities" edge IDs in the mutation.
func (m *UserMutation) ActivitiesIDs() (ids []uuid.UUID) {
	for id := range m.activities {
		ids = append(ids, id)
	}
	return
}

// ResetActivities resets all changes to the "activities" edge.
func (m *UserMutation) ResetActivities() {
	m.activities = nil
	m.clearedactivities = false
	m.removedactivities = nil
}

// AddTemplateIDs adds the "templates" edge to the Template entity by ids.
func (m *UserMutation) AddTemplateIDs(ids ...uuid.UUID) {
	if m.templates == nil {
		m.templates = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.templates[ids[i]] = struct{}{}
	}
}

// ClearTemplates clears the "templates" edge to the Template entity.
func (m *UserMutation) ClearTemplates() {
	m.clearedtemplates = true
}

// TemplatesCleared reports if the "templates" edge to the Template entity was cleared.
func (m *UserMutation) TemplatesCleared() bool {
	return m.clearedtemplates
}

// RemoveTemplateIDs removes the "templates" edge to the Template entity by IDs.
func (m *UserMutation) RemoveTemplateIDs(ids ...uuid.UUID) {
	if m.removedtemplates == nil {
		m.removedtemplates = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.templates, ids[i])
		m.removedtemplates[ids[i]] = struct{}{}
	}
}

// RemovedTemplates returns the removed IDs of the "templates" edge to the Template entity.
func (m *UserMutation) RemovedTemplatesIDs() (ids []uuid.UUID) {
	for id := range m.removedtemplates {
		ids = append(ids, id)
	}
	return
}

// TemplatesIDs returns the "templates" edge IDs in the mutation.
func (m *UserMutation) TemplatesIDs() (ids []uuid.UUID) {
	for id := range m.templates {
		ids = append(ids, id)
	}
	return
}

// ResetTemplates resets all changes to the "templates" edge.
func (m *UserMutation) ResetTemplates() {
	m.templates = nil
	m.clearedtemplates = false
	m.removedtemplates = nil
}

// AddCodeIDs adds the "codes" edge to the VerificationCode entity by ids.
func (m *UserMutation) AddCodeIDs(ids ...uuid.UUID) {
	if m.codes == nil {
		m.codes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.codes[ids[i]] = struct{}{}
	}
}

// ClearCodes clears the "codes" edge to the VerificationCode entity.
func (m *UserMutation) ClearCodes() {
	m.clearedcodes = true
}

// CodesCleared reports if the "codes" edge to the VerificationCode entity was cleared.
func (m *UserMutation) CodesCleared() bool {
	return m.clearedcodes
}

// RemoveCodeIDs removes the "codes" edge to the VerificationCode entity by IDs.
func (m *UserMutation) RemoveCodeIDs(ids ...uuid.UUID) {
	if m.removedcodes == nil {
		m.removedcodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.codes, ids[i])
		m.removedcodes[ids[i]] = struct{}{}
	}
}

// RemovedCodes returns the removed IDs of the "codes" edge to the VerificationCode entity.
func (m *UserMutation) RemovedCodesIDs() (ids []uuid.UUID) {
	for id := range m.removedcodes {
		ids = append(ids, id)
	}
	return
}

// CodesIDs returns the "codes" edge IDs in the mutation.
func (m *UserMutation) CodesIDs() (ids []uuid.UUID) {
	for id := range m.codes {
		ids = append(ids, id)
	}
	return
}

// ResetCodes resets all changes to the "codes" edge.
func (m *UserMutation) ResetCodes() {
	m.codes = nil
	m.clearedcodes = false
	m.removedcodes = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *UserMutation) AddTaskIDs(ids ...uuid.UUID) {
	if m.tasks == nil {
		m.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *UserMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *UserMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *UserMutation) RemoveTaskIDs(ids ...uuid.UUID) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *UserMutation) RemovedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *UserMutation) TasksIDs() (ids []uuid.UUID) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *UserMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.creationDate != nil {
		fields = append(fields, user.FieldCreationDate)
	}
	if m._Username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m._Mail != nil {
		fields = append(fields, user.FieldMail)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m._Dans != nil {
		fields = append(fields, user.FieldDans)
	}
	if m._MailValid != nil {
		fields = append(fields, user.FieldMailValid)
	}
	if m._TutorialCompleted != nil {
		fields = append(fields, user.FieldTutorialCompleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreationDate:
		return m.CreationDate()
	case user.FieldUsername:
		return m.Username()
	case user.FieldMail:
		return m.Mail()
	case user.FieldPassword:
		return m.Password()
	case user.FieldDans:
		return m.Dans()
	case user.FieldMailValid:
		return m.MailValid()
	case user.FieldTutorialCompleted:
		return m.TutorialCompleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldMail:
		return m.OldMail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldDans:
		return m.OldDans(ctx)
	case user.FieldMailValid:
		return m.OldMailValid(ctx)
	case user.FieldTutorialCompleted:
		return m.OldTutorialCompleted(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldMail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldDans:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDans(v)
		return nil
	case user.FieldMailValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMailValid(v)
		return nil
	case user.FieldTutorialCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTutorialCompleted(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.add_Dans != nil {
		fields = append(fields, user.FieldDans)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDans:
		return m.AddedDans()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldDans:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDans(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldMail:
		m.ResetMail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldDans:
		m.ResetDans()
		return nil
	case user.FieldMailValid:
		m.ResetMailValid()
		return nil
	case user.FieldTutorialCompleted:
		m.ResetTutorialCompleted()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.activities != nil {
		edges = append(edges, user.EdgeActivities)
	}
	if m.templates != nil {
		edges = append(edges, user.EdgeTemplates)
	}
	if m.codes != nil {
		edges = append(edges, user.EdgeCodes)
	}
	if m.tasks != nil {
		edges = append(edges, user.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.activities))
		for id := range m.activities {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTemplates:
		ids := make([]ent.Value, 0, len(m.templates))
		for id := range m.templates {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCodes:
		ids := make([]ent.Value, 0, len(m.codes))
		for id := range m.codes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedactivities != nil {
		edges = append(edges, user.EdgeActivities)
	}
	if m.removedtemplates != nil {
		edges = append(edges, user.EdgeTemplates)
	}
	if m.removedcodes != nil {
		edges = append(edges, user.EdgeCodes)
	}
	if m.removedtasks != nil {
		edges = append(edges, user.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.removedactivities))
		for id := range m.removedactivities {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTemplates:
		ids := make([]ent.Value, 0, len(m.removedtemplates))
		for id := range m.removedtemplates {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCodes:
		ids := make([]ent.Value, 0, len(m.removedcodes))
		for id := range m.removedcodes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedactivities {
		edges = append(edges, user.EdgeActivities)
	}
	if m.clearedtemplates {
		edges = append(edges, user.EdgeTemplates)
	}
	if m.clearedcodes {
		edges = append(edges, user.EdgeCodes)
	}
	if m.clearedtasks {
		edges = append(edges, user.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeActivities:
		return m.clearedactivities
	case user.EdgeTemplates:
		return m.clearedtemplates
	case user.EdgeCodes:
		return m.clearedcodes
	case user.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeActivities:
		m.ResetActivities()
		return nil
	case user.EdgeTemplates:
		m.ResetTemplates()
		return nil
	case user.EdgeCodes:
		m.ResetCodes()
		return nil
	case user.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VerificationCodeMutation represents an operation that mutates the VerificationCode nodes in the graph.
type VerificationCodeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	creationDate  *time.Time
	_type         *string
	code          *string
	expireDate    *time.Time
	valid         *bool
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*VerificationCode, error)
	predicates    []predicate.VerificationCode
}

var _ ent.Mutation = (*VerificationCodeMutation)(nil)

// verificationcodeOption allows management of the mutation configuration using functional options.
type verificationcodeOption func(*VerificationCodeMutation)

// newVerificationCodeMutation creates new mutation for the VerificationCode entity.
func newVerificationCodeMutation(c config, op Op, opts ...verificationcodeOption) *VerificationCodeMutation {
	m := &VerificationCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeVerificationCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVerificationCodeID sets the ID field of the mutation.
func withVerificationCodeID(id uuid.UUID) verificationcodeOption {
	return func(m *VerificationCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *VerificationCode
		)
		m.oldValue = func(ctx context.Context) (*VerificationCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VerificationCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVerificationCode sets the old VerificationCode of the mutation.
func withVerificationCode(node *VerificationCode) verificationcodeOption {
	return func(m *VerificationCodeMutation) {
		m.oldValue = func(context.Context) (*VerificationCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VerificationCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VerificationCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VerificationCode entities.
func (m *VerificationCodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VerificationCodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VerificationCodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VerificationCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *VerificationCodeMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *VerificationCodeMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *VerificationCodeMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetType sets the "type" field.
func (m *VerificationCodeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *VerificationCodeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *VerificationCodeMutation) ResetType() {
	m._type = nil
}

// SetCode sets the "code" field.
func (m *VerificationCodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *VerificationCodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *VerificationCodeMutation) ResetCode() {
	m.code = nil
}

// SetExpireDate sets the "expireDate" field.
func (m *VerificationCodeMutation) SetExpireDate(t time.Time) {
	m.expireDate = &t
}

// ExpireDate returns the value of the "expireDate" field in the mutation.
func (m *VerificationCodeMutation) ExpireDate() (r time.Time, exists bool) {
	v := m.expireDate
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireDate returns the old "expireDate" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldExpireDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireDate: %w", err)
	}
	return oldValue.ExpireDate, nil
}

// ResetExpireDate resets all changes to the "expireDate" field.
func (m *VerificationCodeMutation) ResetExpireDate() {
	m.expireDate = nil
}

// SetValid sets the "valid" field.
func (m *VerificationCodeMutation) SetValid(b bool) {
	m.valid = &b
}

// Valid returns the value of the "valid" field in the mutation.
func (m *VerificationCodeMutation) Valid() (r bool, exists bool) {
	v := m.valid
	if v == nil {
		return
	}
	return *v, true
}

// OldValid returns the old "valid" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValid: %w", err)
	}
	return oldValue.Valid, nil
}

// ResetValid resets all changes to the "valid" field.
func (m *VerificationCodeMutation) ResetValid() {
	m.valid = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *VerificationCodeMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *VerificationCodeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *VerificationCodeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *VerificationCodeMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *VerificationCodeMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *VerificationCodeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the VerificationCodeMutation builder.
func (m *VerificationCodeMutation) Where(ps ...predicate.VerificationCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VerificationCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VerificationCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VerificationCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VerificationCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VerificationCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VerificationCode).
func (m *VerificationCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VerificationCodeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.creationDate != nil {
		fields = append(fields, verificationcode.FieldCreationDate)
	}
	if m._type != nil {
		fields = append(fields, verificationcode.FieldType)
	}
	if m.code != nil {
		fields = append(fields, verificationcode.FieldCode)
	}
	if m.expireDate != nil {
		fields = append(fields, verificationcode.FieldExpireDate)
	}
	if m.valid != nil {
		fields = append(fields, verificationcode.FieldValid)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VerificationCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case verificationcode.FieldCreationDate:
		return m.CreationDate()
	case verificationcode.FieldType:
		return m.GetType()
	case verificationcode.FieldCode:
		return m.Code()
	case verificationcode.FieldExpireDate:
		return m.ExpireDate()
	case verificationcode.FieldValid:
		return m.Valid()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VerificationCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case verificationcode.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case verificationcode.FieldType:
		return m.OldType(ctx)
	case verificationcode.FieldCode:
		return m.OldCode(ctx)
	case verificationcode.FieldExpireDate:
		return m.OldExpireDate(ctx)
	case verificationcode.FieldValid:
		return m.OldValid(ctx)
	}
	return nil, fmt.Errorf("unknown VerificationCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case verificationcode.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case verificationcode.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case verificationcode.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case verificationcode.FieldExpireDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireDate(v)
		return nil
	case verificationcode.FieldValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValid(v)
		return nil
	}
	return fmt.Errorf("unknown VerificationCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VerificationCodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VerificationCodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VerificationCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VerificationCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VerificationCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VerificationCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VerificationCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VerificationCodeMutation) ResetField(name string) error {
	switch name {
	case verificationcode.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case verificationcode.FieldType:
		m.ResetType()
		return nil
	case verificationcode.FieldCode:
		m.ResetCode()
		return nil
	case verificationcode.FieldExpireDate:
		m.ResetExpireDate()
		return nil
	case verificationcode.FieldValid:
		m.ResetValid()
		return nil
	}
	return fmt.Errorf("unknown VerificationCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VerificationCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, verificationcode.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VerificationCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case verificationcode.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VerificationCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VerificationCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VerificationCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, verificationcode.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VerificationCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case verificationcode.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VerificationCodeMutation) ClearEdge(name string) error {
	switch name {
	case verificationcode.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown VerificationCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VerificationCodeMutation) ResetEdge(name string) error {
	switch name {
	case verificationcode.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown VerificationCode edge %s", name)
}
